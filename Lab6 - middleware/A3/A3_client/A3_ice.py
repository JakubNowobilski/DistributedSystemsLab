# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `A3.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module A3
_M_A3 = Ice.openModule('A3')
__name__ = 'A3'

if 'IssueType' not in _M_A3.__dict__:
    _M_A3.IssueType = Ice.createTempClass()
    class IssueType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    IssueType.TAX = IssueType("TAX", 0)
    IssueType.TICKET = IssueType("TICKET", 1)
    IssueType.PERMIT = IssueType("PERMIT", 2)
    IssueType._enumerators = { 0:IssueType.TAX, 1:IssueType.TICKET, 2:IssueType.PERMIT }

    _M_A3._t_IssueType = IcePy.defineEnum('::A3::IssueType', IssueType, (), IssueType._enumerators)

    _M_A3.IssueType = IssueType
    del IssueType

if 'IdentifierInUseException' not in _M_A3.__dict__:
    _M_A3.IdentifierInUseException = Ice.createTempClass()
    class IdentifierInUseException(Ice.UserException):
        def __init__(self, clientIdentifier=''):
            self.clientIdentifier = clientIdentifier

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::A3::IdentifierInUseException'

    _M_A3._t_IdentifierInUseException = IcePy.defineException('::A3::IdentifierInUseException', IdentifierInUseException, (), False, None, (('clientIdentifier', (), IcePy._t_string, False, 0),))
    IdentifierInUseException._ice_type = _M_A3._t_IdentifierInUseException

    _M_A3.IdentifierInUseException = IdentifierInUseException
    del IdentifierInUseException

if 'IssueSubmittedException' not in _M_A3.__dict__:
    _M_A3.IssueSubmittedException = Ice.createTempClass()
    class IssueSubmittedException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::A3::IssueSubmittedException'

    _M_A3._t_IssueSubmittedException = IcePy.defineException('::A3::IssueSubmittedException', IssueSubmittedException, (), False, None, ())
    IssueSubmittedException._ice_type = _M_A3._t_IssueSubmittedException

    _M_A3.IssueSubmittedException = IssueSubmittedException
    del IssueSubmittedException

if 'NoClientFoundException' not in _M_A3.__dict__:
    _M_A3.NoClientFoundException = Ice.createTempClass()
    class NoClientFoundException(Ice.UserException):
        def __init__(self, clientIdentifier=''):
            self.clientIdentifier = clientIdentifier

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::A3::NoClientFoundException'

    _M_A3._t_NoClientFoundException = IcePy.defineException('::A3::NoClientFoundException', NoClientFoundException, (), False, None, (('clientIdentifier', (), IcePy._t_string, False, 0),))
    NoClientFoundException._ice_type = _M_A3._t_NoClientFoundException

    _M_A3.NoClientFoundException = NoClientFoundException
    del NoClientFoundException

if 'Issue' not in _M_A3.__dict__:
    _M_A3.Issue = Ice.createTempClass()
    class Issue(object):
        def __init__(self, issueType=_M_A3.IssueType.TAX, issueId=''):
            self.issueType = issueType
            self.issueId = issueId

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.issueType)
            _h = 5 * _h + Ice.getHash(self.issueId)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_A3.Issue):
                return NotImplemented
            else:
                if self.issueType is None or other.issueType is None:
                    if self.issueType != other.issueType:
                        return (-1 if self.issueType is None else 1)
                else:
                    if self.issueType < other.issueType:
                        return -1
                    elif self.issueType > other.issueType:
                        return 1
                if self.issueId is None or other.issueId is None:
                    if self.issueId != other.issueId:
                        return (-1 if self.issueId is None else 1)
                else:
                    if self.issueId < other.issueId:
                        return -1
                    elif self.issueId > other.issueId:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_A3._t_Issue)

        __repr__ = __str__

    _M_A3._t_Issue = IcePy.defineStruct('::A3::Issue', Issue, (), (
        ('issueType', (), _M_A3._t_IssueType),
        ('issueId', (), IcePy._t_string)
    ))

    _M_A3.Issue = Issue
    del Issue

if 'IssueNotification' not in _M_A3.__dict__:
    _M_A3.IssueNotification = Ice.createTempClass()
    class IssueNotification(object):
        def __init__(self, issue=Ice._struct_marker, dueTime=0):
            if issue is Ice._struct_marker:
                self.issue = _M_A3.Issue()
            else:
                self.issue = issue
            self.dueTime = dueTime

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.issue)
            _h = 5 * _h + Ice.getHash(self.dueTime)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_A3.IssueNotification):
                return NotImplemented
            else:
                if self.issue is None or other.issue is None:
                    if self.issue != other.issue:
                        return (-1 if self.issue is None else 1)
                else:
                    if self.issue < other.issue:
                        return -1
                    elif self.issue > other.issue:
                        return 1
                if self.dueTime is None or other.dueTime is None:
                    if self.dueTime != other.dueTime:
                        return (-1 if self.dueTime is None else 1)
                else:
                    if self.dueTime < other.dueTime:
                        return -1
                    elif self.dueTime > other.dueTime:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_A3._t_IssueNotification)

        __repr__ = __str__

    _M_A3._t_IssueNotification = IcePy.defineStruct('::A3::IssueNotification', IssueNotification, (), (
        ('issue', (), _M_A3._t_Issue),
        ('dueTime', (), IcePy._t_long)
    ))

    _M_A3.IssueNotification = IssueNotification
    del IssueNotification

if 'IssueResult' not in _M_A3.__dict__:
    _M_A3.IssueResult = Ice.createTempClass()
    class IssueResult(object):
        def __init__(self, issue=Ice._struct_marker, result=''):
            if issue is Ice._struct_marker:
                self.issue = _M_A3.Issue()
            else:
                self.issue = issue
            self.result = result

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.issue)
            _h = 5 * _h + Ice.getHash(self.result)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_A3.IssueResult):
                return NotImplemented
            else:
                if self.issue is None or other.issue is None:
                    if self.issue != other.issue:
                        return (-1 if self.issue is None else 1)
                else:
                    if self.issue < other.issue:
                        return -1
                    elif self.issue > other.issue:
                        return 1
                if self.result is None or other.result is None:
                    if self.result != other.result:
                        return (-1 if self.result is None else 1)
                else:
                    if self.result < other.result:
                        return -1
                    elif self.result > other.result:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_A3._t_IssueResult)

        __repr__ = __str__

    _M_A3._t_IssueResult = IcePy.defineStruct('::A3::IssueResult', IssueResult, (), (
        ('issue', (), _M_A3._t_Issue),
        ('result', (), IcePy._t_string)
    ))

    _M_A3.IssueResult = IssueResult
    del IssueResult

_M_A3._t_ClientCallback = IcePy.defineValue('::A3::ClientCallback', Ice.Value, -1, (), False, True, None, ())

if 'ClientCallbackPrx' not in _M_A3.__dict__:
    _M_A3.ClientCallbackPrx = Ice.createTempClass()
    class ClientCallbackPrx(Ice.ObjectPrx):

        def issueReply(self, issueResult, context=None):
            return _M_A3.ClientCallback._op_issueReply.invoke(self, ((issueResult, ), context))

        def issueReplyAsync(self, issueResult, context=None):
            return _M_A3.ClientCallback._op_issueReply.invokeAsync(self, ((issueResult, ), context))

        def begin_issueReply(self, issueResult, _response=None, _ex=None, _sent=None, context=None):
            return _M_A3.ClientCallback._op_issueReply.begin(self, ((issueResult, ), _response, _ex, _sent, context))

        def end_issueReply(self, _r):
            return _M_A3.ClientCallback._op_issueReply.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_A3.ClientCallbackPrx.ice_checkedCast(proxy, '::A3::ClientCallback', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_A3.ClientCallbackPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::A3::ClientCallback'
    _M_A3._t_ClientCallbackPrx = IcePy.defineProxy('::A3::ClientCallback', ClientCallbackPrx)

    _M_A3.ClientCallbackPrx = ClientCallbackPrx
    del ClientCallbackPrx

    _M_A3.ClientCallback = Ice.createTempClass()
    class ClientCallback(Ice.Object):

        def ice_ids(self, current=None):
            return ('::A3::ClientCallback', '::Ice::Object')

        def ice_id(self, current=None):
            return '::A3::ClientCallback'

        @staticmethod
        def ice_staticId():
            return '::A3::ClientCallback'

        def issueReply(self, issueResult, current=None):
            raise NotImplementedError("servant method 'issueReply' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_A3._t_ClientCallbackDisp)

        __repr__ = __str__

    _M_A3._t_ClientCallbackDisp = IcePy.defineClass('::A3::ClientCallback', ClientCallback, (), None, ())
    ClientCallback._ice_type = _M_A3._t_ClientCallbackDisp

    ClientCallback._op_issueReply = IcePy.Operation('issueReply', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_A3._t_IssueResult, False, 0),), (), None, ())

    _M_A3.ClientCallback = ClientCallback
    del ClientCallback

_M_A3._t_ServerCallback = IcePy.defineValue('::A3::ServerCallback', Ice.Value, -1, (), False, True, None, ())

if 'ServerCallbackPrx' not in _M_A3.__dict__:
    _M_A3.ServerCallbackPrx = Ice.createTempClass()
    class ServerCallbackPrx(Ice.ObjectPrx):

        def connectClient(self, client, context=None):
            return _M_A3.ServerCallback._op_connectClient.invoke(self, ((client, ), context))

        def connectClientAsync(self, client, context=None):
            return _M_A3.ServerCallback._op_connectClient.invokeAsync(self, ((client, ), context))

        def begin_connectClient(self, client, _response=None, _ex=None, _sent=None, context=None):
            return _M_A3.ServerCallback._op_connectClient.begin(self, ((client, ), _response, _ex, _sent, context))

        def end_connectClient(self, _r):
            return _M_A3.ServerCallback._op_connectClient.end(self, _r)

        def issueRequest(self, clientIdentity, issueType, context=None):
            return _M_A3.ServerCallback._op_issueRequest.invoke(self, ((clientIdentity, issueType), context))

        def issueRequestAsync(self, clientIdentity, issueType, context=None):
            return _M_A3.ServerCallback._op_issueRequest.invokeAsync(self, ((clientIdentity, issueType), context))

        def begin_issueRequest(self, clientIdentity, issueType, _response=None, _ex=None, _sent=None, context=None):
            return _M_A3.ServerCallback._op_issueRequest.begin(self, ((clientIdentity, issueType), _response, _ex, _sent, context))

        def end_issueRequest(self, _r):
            return _M_A3.ServerCallback._op_issueRequest.end(self, _r)

        def pendingIssue(self, clientIdentity, context=None):
            return _M_A3.ServerCallback._op_pendingIssue.invoke(self, ((clientIdentity, ), context))

        def pendingIssueAsync(self, clientIdentity, context=None):
            return _M_A3.ServerCallback._op_pendingIssue.invokeAsync(self, ((clientIdentity, ), context))

        def begin_pendingIssue(self, clientIdentity, _response=None, _ex=None, _sent=None, context=None):
            return _M_A3.ServerCallback._op_pendingIssue.begin(self, ((clientIdentity, ), _response, _ex, _sent, context))

        def end_pendingIssue(self, _r):
            return _M_A3.ServerCallback._op_pendingIssue.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_A3.ServerCallbackPrx.ice_checkedCast(proxy, '::A3::ServerCallback', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_A3.ServerCallbackPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::A3::ServerCallback'
    _M_A3._t_ServerCallbackPrx = IcePy.defineProxy('::A3::ServerCallback', ServerCallbackPrx)

    _M_A3.ServerCallbackPrx = ServerCallbackPrx
    del ServerCallbackPrx

    _M_A3.ServerCallback = Ice.createTempClass()
    class ServerCallback(Ice.Object):

        def ice_ids(self, current=None):
            return ('::A3::ServerCallback', '::Ice::Object')

        def ice_id(self, current=None):
            return '::A3::ServerCallback'

        @staticmethod
        def ice_staticId():
            return '::A3::ServerCallback'

        def connectClient(self, client, current=None):
            raise NotImplementedError("servant method 'connectClient' not implemented")

        def issueRequest(self, clientIdentity, issueType, current=None):
            raise NotImplementedError("servant method 'issueRequest' not implemented")

        def pendingIssue(self, clientIdentity, current=None):
            raise NotImplementedError("servant method 'pendingIssue' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_A3._t_ServerCallbackDisp)

        __repr__ = __str__

    _M_A3._t_ServerCallbackDisp = IcePy.defineClass('::A3::ServerCallback', ServerCallback, (), None, ())
    ServerCallback._ice_type = _M_A3._t_ServerCallbackDisp

    ServerCallback._op_connectClient = IcePy.Operation('connectClient', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_A3._t_ClientCallbackPrx, False, 0),), (), ((), _M_A3._t_IssueResult, False, 0), (_M_A3._t_IdentifierInUseException,))
    ServerCallback._op_issueRequest = IcePy.Operation('issueRequest', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_A3._t_IssueType, False, 0)), (), ((), _M_A3._t_IssueResult, False, 0), (_M_A3._t_IssueSubmittedException, _M_A3._t_NoClientFoundException))
    ServerCallback._op_pendingIssue = IcePy.Operation('pendingIssue', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_A3._t_IssueNotification, False, 0), (_M_A3._t_NoClientFoundException,))

    _M_A3.ServerCallback = ServerCallback
    del ServerCallback

# End of module A3
