//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `A3.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package A3;

public class IssueResult implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public Issue issue;

    public String result;

    public IssueResult()
    {
        this.issue = new Issue();
        this.result = "";
    }

    public IssueResult(Issue issue, String result)
    {
        this.issue = issue;
        this.result = result;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        IssueResult r = null;
        if(rhs instanceof IssueResult)
        {
            r = (IssueResult)rhs;
        }

        if(r != null)
        {
            if(this.issue != r.issue)
            {
                if(this.issue == null || r.issue == null || !this.issue.equals(r.issue))
                {
                    return false;
                }
            }
            if(this.result != r.result)
            {
                if(this.result == null || r.result == null || !this.result.equals(r.result))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::A3::IssueResult");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, issue);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, result);
        return h_;
    }

    public IssueResult clone()
    {
        IssueResult c = null;
        try
        {
            c = (IssueResult)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        Issue.ice_write(ostr, this.issue);
        ostr.writeString(this.result);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.issue = Issue.ice_read(istr);
        this.result = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, IssueResult v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public IssueResult ice_read(com.zeroc.Ice.InputStream istr)
    {
        IssueResult v = new IssueResult();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<IssueResult> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, IssueResult v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<IssueResult> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(IssueResult.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final IssueResult _nullMarshalValue = new IssueResult();

    /** @hidden */
    public static final long serialVersionUID = -32834846913998919L;
}
