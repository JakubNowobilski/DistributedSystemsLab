//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `A3.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package A3;

public interface ServerCallback extends com.zeroc.Ice.Object
{
    IssueResult connectClient(ClientCallbackPrx client, com.zeroc.Ice.Current current)
        throws IdentifierInUseException;

    IssueResult issueRequest(String clientIdentity, IssueType issueType, com.zeroc.Ice.Current current)
        throws IssueSubmitedException,
               NoClientFoundException;

    IssueNotification pendingIssue(String clientIdentity, com.zeroc.Ice.Current current)
        throws NoClientFoundException;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::A3::ServerCallback",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::A3::ServerCallback";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_connectClient(ServerCallback obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        ClientCallbackPrx iceP_client;
        iceP_client = ClientCallbackPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        IssueResult ret = obj.connectClient(iceP_client, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        IssueResult.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_issueRequest(ServerCallback obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_clientIdentity;
        IssueType iceP_issueType;
        iceP_clientIdentity = istr.readString();
        iceP_issueType = IssueType.ice_read(istr);
        inS.endReadParams();
        IssueResult ret = obj.issueRequest(iceP_clientIdentity, iceP_issueType, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        IssueResult.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_pendingIssue(ServerCallback obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_clientIdentity;
        iceP_clientIdentity = istr.readString();
        inS.endReadParams();
        IssueNotification ret = obj.pendingIssue(iceP_clientIdentity, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        IssueNotification.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "connectClient",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "issueRequest",
        "pendingIssue"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_connectClient(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 5:
            {
                return _iceD_issueRequest(this, in, current);
            }
            case 6:
            {
                return _iceD_pendingIssue(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
