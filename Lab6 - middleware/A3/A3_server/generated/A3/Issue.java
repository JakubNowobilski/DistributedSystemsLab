//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `A3.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package A3;

public class Issue implements java.lang.Cloneable,
                              java.io.Serializable
{
    public IssueType issueType;

    public String issueId;

    public Issue()
    {
        this.issueType = IssueType.TAX;
        this.issueId = "";
    }

    public Issue(IssueType issueType, String issueId)
    {
        this.issueType = issueType;
        this.issueId = issueId;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Issue r = null;
        if(rhs instanceof Issue)
        {
            r = (Issue)rhs;
        }

        if(r != null)
        {
            if(this.issueType != r.issueType)
            {
                if(this.issueType == null || r.issueType == null || !this.issueType.equals(r.issueType))
                {
                    return false;
                }
            }
            if(this.issueId != r.issueId)
            {
                if(this.issueId == null || r.issueId == null || !this.issueId.equals(r.issueId))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::A3::Issue");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, issueType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, issueId);
        return h_;
    }

    public Issue clone()
    {
        Issue c = null;
        try
        {
            c = (Issue)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        IssueType.ice_write(ostr, this.issueType);
        ostr.writeString(this.issueId);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.issueType = IssueType.ice_read(istr);
        this.issueId = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Issue v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Issue ice_read(com.zeroc.Ice.InputStream istr)
    {
        Issue v = new Issue();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Issue> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Issue v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Issue> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Issue.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Issue _nullMarshalValue = new Issue();

    /** @hidden */
    public static final long serialVersionUID = -2079702682906499659L;
}
